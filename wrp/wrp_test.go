package wrp

import (
	"bytes"
	"github.com/stretchr/testify/assert"
	"reflect"
	"testing"
)

// DEPRECATED
func TestDecode(t *testing.T) {
	in := []byte{0x85, 0xa8, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
		0x70, 0x65, 0x03, 0xb0, 0x74, 0x72, 0x61, 0x6e,
		0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
		0x69, 0x64, 0xd9, 0x24, 0x39, 0x34, 0x34, 0x37,
		0x32, 0x34, 0x31, 0x63, 0x2d, 0x35, 0x32, 0x33,
		0x38, 0x2d, 0x34, 0x63, 0x62, 0x39, 0x2d, 0x39,
		0x62, 0x61, 0x61, 0x2d, 0x37, 0x30, 0x37, 0x36,
		0x65, 0x33, 0x32, 0x33, 0x32, 0x38, 0x39, 0x39,
		0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd9,
		0x26, 0x64, 0x6e, 0x73, 0x3a, 0x77, 0x65, 0x62,
		0x70, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x63, 0x61,
		0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
		0x32, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
		0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa4,
		0x64, 0x65, 0x73, 0x74, 0xb2, 0x73, 0x65, 0x72,
		0x69, 0x61, 0x6c, 0x3a, 0x31, 0x32, 0x33, 0x34,
		0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa7,
		0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0xc4,
		0x45, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65,
		0x73, 0x22, 0x3a, 0x20, 0x5b, 0x20, 0x22, 0x44,
		0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x58, 0x5f,
		0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x43, 0x4f,
		0x4d, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
		0x74, 0x79, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77,
		0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65,
		0x77, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
		0x6c, 0x22, 0x20, 0x5d, 0x20, 0x7d}

	expected := SimpleReqResponseMsg{Source: "dns:webpa.comcast.com/v2-device-config",
		Dest:            "serial:1234/config",
		TransactionUUID: "9447241c-5238-4cb9-9baa-7076e3232899",
		Payload:         []byte("{ \"names\": [ \"Device.X_CISCO_COM_Security.Firewall.FirewallLevel\" ] }")}

	v, err := Decode(in)
	if nil != err {
		t.Error("error not nil.")
	}

	got := v.(SimpleReqResponseMsg)
	if false == reflect.DeepEqual(got, expected) {
		t.Errorf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			expected, got)
	}
}

// DEPRECATED
func TestDecodeWithInvalidType(t *testing.T) {
	assert := assert.New(t)

	badMsg := []byte("Time to break things!")

	_, err := Decode(badMsg)

	assert.NotNil(err)
}

// DEPRECATED
func TestSimpleEvent(t *testing.T) {
	start := SimpleEventMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:    "mac:112233445566",
		Payload: []byte("{ \"whatever i want")}

	encoded, e1 := start.Encode()
	if nil != e1 {
		t.Errorf("e1 is not nil! %v\n", e1)
	}

	got, e2 := Decode(encoded)
	if nil != e2 {
		t.Errorf("e2 is not nil! %v\n", e2)
	}

	if false == reflect.DeepEqual(got, start) {
		t.Errorf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			start, got)
	}

	start.String()
}

// DEPRECATED
func TestSimpleEventUsingWriterTo(t *testing.T) {
	assert := assert.New(t)

	start := SimpleEventMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:    "mac:112233445566",
		Payload: []byte("{ \"whatever i want")}

	var buffer bytes.Buffer
	if written, err := WriterTo(start).WriteTo(&buffer); assert.Nil(err) {
		assert.True(written > 0)
		encoded := buffer.Bytes()
		if decoded, err := Decode(encoded); assert.Nil(err) {
			assert.Equal(start, decoded)
		}
	}
}

// DEPRECATED
func TestSimpleReqResponse(t *testing.T) {
	start := SimpleReqResponseMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:            "mac:112233445566",
		TransactionUUID: "23o234u234ioasdflk",
		Payload:         []byte("{ \"whatever i want!\" }")}

	encoded, e1 := start.Encode()
	if nil != e1 {
		t.Errorf("e1 is not nil! %v\n", e1)
	}

	got, e2 := Decode(encoded)
	if nil != e2 {
		t.Errorf("e2 is not nil! %v\n", e2)
	}

	if false == reflect.DeepEqual(got, start) {
		t.Errorf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			start, got)
	}

	start.String()
}

// DEPRECATED
func TestSimpleReqResponseUsingWriterTo(t *testing.T) {
	assert := assert.New(t)

	start := SimpleReqResponseMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:            "mac:112233445566",
		TransactionUUID: "23o234u234ioasdflk",
		Payload:         []byte("{ \"whatever i want!\" }")}

	var buffer bytes.Buffer
	if written, err := WriterTo(start).WriteTo(&buffer); assert.Nil(err) {
		assert.True(written > 0)
		encoded := buffer.Bytes()
		if decoded, err := Decode(encoded); assert.Nil(err) {
			assert.Equal(start, decoded)
		}
	}
}

// DEPRECATED
func TestAuthStatus(t *testing.T) {
	start := AuthStatusMsg{Status: 123}

	encoded, e1 := start.Encode()
	if nil != e1 {
		t.Errorf("e1 is not nil! %v\n", e1)
	}

	got, e2 := Decode(encoded)
	if nil != e2 {
		t.Error("e2 is not nil! %v\n", e2)
	}

	if false == reflect.DeepEqual(got, start) {
		t.Errorf("Two structs are not equal:\nexpected:\n%s\ngot:\n%s\n",
			start, got)
	}

	start.String()
}

// DEPRECATED
func TestAuthStatusUsingWriterTo(t *testing.T) {
	assert := assert.New(t)

	start := AuthStatusMsg{Status: 123}

	var buffer bytes.Buffer
	if written, err := WriterTo(start).WriteTo(&buffer); assert.Nil(err) {
		assert.True(written > 0)
		encoded := buffer.Bytes()
		if decoded, err := Decode(encoded); assert.Nil(err) {
			assert.Equal(start, decoded)
		}
	}
}

// DEPRECATED
func TestInvalidMsgType(t *testing.T) {
	in := []byte{0x85, 0xa8, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
		0x70, 0x65, 0x09, 0xb0, 0x74, 0x72, 0x61, 0x6e,
		0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
		0x69, 0x64, 0xd9, 0x24, 0x39, 0x34, 0x34, 0x37,
		0x32, 0x34, 0x31, 0x63, 0x2d, 0x35, 0x32, 0x33,
		0x38, 0x2d, 0x34, 0x63, 0x62, 0x39, 0x2d, 0x39,
		0x62, 0x61, 0x61, 0x2d, 0x37, 0x30, 0x37, 0x36,
		0x65, 0x33, 0x32, 0x33, 0x32, 0x38, 0x39, 0x39,
		0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd9,
		0x26, 0x64, 0x6e, 0x73, 0x3a, 0x77, 0x65, 0x62,
		0x70, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x63, 0x61,
		0x73, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x76,
		0x32, 0x2d, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
		0x2d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa4,
		0x64, 0x65, 0x73, 0x74, 0xb2, 0x73, 0x65, 0x72,
		0x69, 0x61, 0x6c, 0x3a, 0x31, 0x32, 0x33, 0x34,
		0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0xa7,
		0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0xc4,
		0x45, 0x7b, 0x20, 0x22, 0x6e, 0x61, 0x6d, 0x65,
		0x73, 0x22, 0x3a, 0x20, 0x5b, 0x20, 0x22, 0x44,
		0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x58, 0x5f,
		0x43, 0x49, 0x53, 0x43, 0x4f, 0x5f, 0x43, 0x4f,
		0x4d, 0x5f, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69,
		0x74, 0x79, 0x2e, 0x46, 0x69, 0x72, 0x65, 0x77,
		0x61, 0x6c, 0x6c, 0x2e, 0x46, 0x69, 0x72, 0x65,
		0x77, 0x61, 0x6c, 0x6c, 0x4c, 0x65, 0x76, 0x65,
		0x6c, 0x22, 0x20, 0x5d, 0x20, 0x7d}

	got, err := Decode(in)
	if (nil != got) || (nil == err) {
		t.Error("Testing for invalid msg type 9 failed.")
	}
}

// DEPRECATED
func TestTruncatedMsg(t *testing.T) {
	in := []byte{0x85, 0xa8, 0x6d, 0x73, 0x67, 0x5f, 0x74, 0x79,
		0x70, 0x65, 0x09, 0xb0, 0x74, 0x72, 0x61, 0x6e,
		0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x75,
		0x69, 0x64, 0xd9, 0x24, 0x39, 0x34, 0x34, 0x37,
		0x32, 0x34, 0x31, 0x63, 0x2d, 0x35, 0x32, 0x33,
		0x38, 0x2d, 0x34, 0x63, 0x62, 0x39, 0x2d, 0x39,
		0x62, 0x61, 0x61, 0x2d, 0x37, 0x30, 0x37, 0x36,
		0x65, 0x33, 0x32, 0x33, 0x32, 0x38, 0x39, 0x39,
		0xa6, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0xd9,
		0x26, 0x64, 0x6e, 0x73, 0x3a, 0x77, 0x65, 0x62,
		0x70, 0x61, 0x2e, 0x63, 0x6f, 0x6d, 0x63, 0x61,
		0x6c, 0x22, 0x20, 0x5d, 0x20, 0x7d}

	got, err := Decode(in)
	if (nil != got) || (nil == err) {
		t.Error("Testing for truncated message failed.")
	}
}

func TestWrpMsgInterface(t *testing.T) {
	assert := assert.New(t)

	reqResponse := SimpleReqResponseMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:            "mac:112233445566",
		TransactionUUID: "23o234u234ioasdflk",
		Payload:         []byte("{ \"whatever i want!\" }")}
	assert.Equal(reqResponse.Dest, reqResponse.Destination())
	assert.Equal(reqResponse.Source, reqResponse.Origin())

	event := SimpleEventMsg{Source: "dns:scytale.webpa.comcast.net/foo",
		Dest:    "mac:112233445566",
		Payload: []byte("{ \"whatever i want!\" }")}
	assert.Equal(event.Dest, event.Destination())
	assert.Equal(event.Source, event.Origin())

	authStatus := AuthStatusMsg{Status: 123}
	assert.Equal("", authStatus.Destination())
	assert.Equal("", authStatus.Origin())
}

func TestGetInt64(t *testing.T) {
	intTypes := map[interface{}]interface{}{
		"string_int":    -8,
		"string_int8":   int8(-8),
		"string_int16":  int16(-8),
		"string_int32":  int32(-8),
		"string_int64":  int64(-8),
		"string_uint":   uint(15),
		"string_uint8":  uint8(15),
		"string_uint16": uint16(15),
		"string_uint32": uint32(15),
		"string_uint64": uint64(15),
		"just_a_string": "bad-input",
	}

	intToCheck, _ := GetInt64(intTypes, "string_int")
	if intToCheck != -8 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_int8")
	if intToCheck != -8 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_int16")
	if intToCheck != -8 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_int32")
	if intToCheck != -8 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_int64")
	if intToCheck != -8 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_uint")
	if intToCheck != 15 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_uint8")
	if intToCheck != 15 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_uint16")
	if intToCheck != 15 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_uint32")
	if intToCheck != 15 {
		t.Error("Testing for casting to int64 failed.")
	}

	intToCheck, _ = GetInt64(intTypes, "string_uint64")
	if intToCheck != 15 {
		t.Error("Testing for casting to int64 failed.")
	}

	_, err := GetInt64(intTypes, "just_a_string")
	if err == nil {
		t.Error("Testing for passing in an unchecked type failed.")
	}
}
